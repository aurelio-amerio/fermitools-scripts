# %%
import numpy as np
import gt_apps as my_apps
import os
# %%
# my_apps.gtEbindef?
my_apps.gtEbindef
#%%

def gtselect(gtselect_dict):
    """
    Calls gtselect from Science Tools.
    """
    print('Running gtselect...')
    
    for key in gtselect_dict.keys():
        my_apps.filter[key] = gtselect_dict[key]

    my_apps.filter.run()

    return

def gtmktime(maketime_dict):
    """
    Calls gtmktime from Science Tools.
    """
    print('Running gtmktime...')

    for key in maketime_dict.keys():
        my_apps.maketime[key] = maketime_dict[key]

    my_apps.maketime.run()

    return 

def gtbindef(gtbindef_dict):
    """
    Calls gtbin from Science Tools.

    """
    print('Running gtbindef...')
    for key in gtbin_dict.keys():
        my_apps.gtbin[key] = gtbin_dict[key]

    my_apps.gtbin.run()

    return 

def gtbin(gtbin_dict):
    """
    Calls gtbin from Science Tools.

    """
    print('Running gtbin...')
    for key in gtbin_dict.keys():
        my_apps.gtbin[key] = gtbin_dict[key]

    my_apps.gtbin.run()

    return 

def gtltcube(label, expcube_dict):
    """
    Calls gtltcube from Science Tools.

    Parameters
    ----------
    label: str
        To automatically set the name of the output file
    filter_dict: python dict
        To define all the parameters

    Returns
    -------
    str
        the autogenerated output file name

    """
    print('Running gtltcube...')
    LABEL = label
    OUTPATH = os.path.join(FT_DATA_OUT, 'output_gtltcube')
    if not os.path.exists(OUTPATH):
        os.makedirs(OUTPATH)
    OUTFILE = os.path.join(OUTPATH, LABEL + '_outofltcube.fits')
    if os.path.exists(OUTFILE):
        print('ATT: Already created %s'%OUTFILE)
    else:
        for key in expcube_dict:
            if key == 'outfile':
                if expcube_dict[key] == 'DEFAULT':
                    my_apps.expCube['outfile'] = OUTFILE
                else:
                    my_apps.expCube[key] = expcube_dict[key]
                continue
            my_apps.expCube[key] = expcube_dict[key]
        my_apps.expCube.run()
        print('Created %s'%OUTFILE)
        # print('gtltcube --> CPU time spent: %.2f'%time.clock())
    return OUTFILE

def gtexpcube2(label, expcube2_dict):
    """
    Calls gtexpcube2 from Science Tools.

    Parameters
    ----------
    label: str
        To automatically set the name of the output file
    expcube2_dict: python dict
        To define all the parameters

    Returns
    -------
    str
        the autogenerated output file name

    """
    print('Running gtexpcube2...')
    LABEL = label
    OUTPATH = os.path.join(FT_DATA_OUT, 'output_gtexpcube2')
    if not os.path.exists(OUTPATH):
        os.makedirs(OUTPATH)
    OUTFILE = os.path.join(OUTPATH, LABEL + '_expcube.fits')
    if os.path.exists(OUTFILE):
        print('ATT: Already created %s'%OUTFILE)
    else:
        for key in expcube2_dict:
            if key == 'outfile':
                if expcube2_dict[key] == 'DEFAULT':
                    my_apps.gtexpcube2['outfile'] = OUTFILE
                else:
                    my_apps.gtexpcube2[key] = expcube2_dict[key]
                continue
            my_apps.gtexpcube2[key] = expcube2_dict[key]
        my_apps.gtexpcube2.run()
        print('Created %s'%OUTFILE)
        # print('gtexpcube2 --> CPU time spent: %.2f'%time.clock())
    return OUTFILE

def gtpsf(label, gtpsf_dict):
    """
    Calls gtpsf from Science Tools

	Parameters
	----------
	label: str
        To automatically set the name of the output file
    gtpsf_dict: python dict
        To define all the parameters

    Returns
    -------
    str
        the autogenerated output file name

    """
    print('Running gtpsf...')
    LABEL = label
    OUTPATH = os.path.join(FT_DATA_FOLDER, 'output/output_gtpsf')
    if not os.path.exists(OUTPATH):
        os.makedirs(OUTPATH)
    INFILE = os.path.join(FT_DATA_FOLDER, 'output/output_gtltcube/%s_outofltcube.fits'%LABEL)
    OUTFILE = os.path.join(OUTPATH, LABEL + '_psf.fits')
    if os.path.exists(OUTFILE):
        print('ATT: Already created %s'%OUTFILE)
        return OUTFILE
    if gtpsf_dict['outfile'] == 'DEFAULT':
       outfile = OUTFILE
    else:
        outfile = gtpsf_dict['outfile']
    if  gtpsf_dict['expcube'] == 'DEFAULT':
        expcube = INFILE
    else:
        expcube = gtpsf_dict['expcube']
    irfs = gtpsf_dict['irfs']
    evtype = gtpsf_dict['evtype']
    ra = gtpsf_dict['ra']
    dec = gtpsf_dict['dec']
    emin = gtpsf_dict['emin']
    emax = gtpsf_dict['emax']
    nenergies = gtpsf_dict['nenergies']
    thetamax = gtpsf_dict['thetamax']
    ntheta = gtpsf_dict['ntheta']
    os.system('gtpsf expcube=%s outfile=%s irfs=%s evtype=%i ra=%f dec=%f emin=%e emax=%e nenergies=%i thetamax=%i ntheta=%i' \
                  %(expcube, outfile, irfs, evtype, ra, dec, emin, emax, \
                        nenergies, thetamax, ntheta))
    print('Created %s'%outfile)
    # print('gtpsf --> CPU time spent: %.2f'%time.clock())
    return OUTFILE

def gtEbindef(ebinning_array, file_name='ebinning.txt'):
    """
    Produces a fits file defining the enrgy binning to fed gtbin.

	Parameters
	----------
    ebinning_array: numpy array
        array in which the energy binnin is defined.
    file_name : str
        file name for the output txt file. (Default = 'ebinning.txt')

    Returns
    -------
    str
        file name of the fits file created
    """
    if not os.path.exists(X_OUT):
        os.makedirs(X_OUT)
    txt_file_name = os.path.join(X_OUT, file_name)
    txt_file = open(txt_file_name, 'w')
    fits_file_name = os.path.join(X_OUT,
                                  file_name.replace('.txt', '.fits'))
    for emin, emax in zip(ebinning_array[:-1], ebinning_array[1:]):
        txt_file.write('%.4f %.4f\n'%(emin, emax))
    txt_file.close()
    os.system('gtbindef bintype=E binfile=%s outfile=%s energyunits=MeV' \
                  %(txt_file_name, fits_file_name))
    print('Created %s...'%fits_file_name)
    return fits_file_name
